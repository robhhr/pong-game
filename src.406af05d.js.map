{"version":3,"sources":["src/settings.js","src/partials/Board.js","src/partials/Paddle.js","src/partials/Ball.js","src/partials/Score.js","src/partials/Winner.js","src/partials/newBalls.js","src/partials/newBalls2.js","src/partials/Game.js","src/index.js"],"names":["SVG_NS","PADDLE_WIDTH","PADDLE_HEIGHT","BOARD_GAP","RADIUS","NEW_RADIUS","MORE_RADIUS","SPEED","TEXT_SIZE","WINNER_TEXT","KEYS","p1up","p1down","p2up","p2down","pauseKey","fireP1","fireP2","Board","width","height","svg","rect","document","createElementNS","setAttributeNS","appendChild","line","Paddle","boardHeight","paddleWidth","paddleHeight","initialX","initialY","keyUp","keyDown","x","y","score","speed","addEventListener","event","key","moveUp","moveDown","Math","max","min","walls","left","top","right","bottom","Ball","boardWidth","radius","direction","ping","Audio","audioFile","reset","vy","vx","floor","random","abs","hitsTop","hitsBottom","player1","player2","increaseScore","p2","getCoordinates","play","catch","e","p1","circle","wallCollision","goalCollision","paddleCollision","Score","xPosition","yPosition","text","textContent","Winner","message","winner1","winner2","box","Balls","balls","BallsTwo","newBalls2","Game","element","paused","gameElement","getElementById","board","boardMid","paddle1","paddle2Gap","paddle2","score1","score2","innerHTML","render","getScore","setMessage","resetScore","game","gameLoop","requestAnimationFrame"],"mappings":"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","file":"src.406af05d.js","sourceRoot":"..","sourcesContent":["export const SVG_NS = \"http://www.w3.org/2000/svg\";\r\n\r\nexport const PADDLE_WIDTH = 6, PADDLE_HEIGHT = 56, BOARD_GAP = 10, RADIUS = 8, NEW_RADIUS = 6.5, MORE_RADIUS = 4, SPEED = 10, TEXT_SIZE = 30, WINNER_TEXT = 22;\r\nexport const KEYS = {\r\n    p1up: \"a\",\r\n    p1down: \"z\",\r\n    p2up: \"ArrowUp\",\r\n    p2down: \"ArrowDown\",\r\n    pauseKey: \" \",\r\n    fireP1: \"ArrowLeft\",\r\n    fireP2: \"ArrowRight\",\r\n}","import { SVG_NS } from '../settings';\r\n\r\nexport default class Board {\r\n  constructor(width, height) {\r\n      this.width = width;\r\n      this.height = height;\r\n  }\r\n  render(svg) {\r\n    let rect = document.createElementNS(SVG_NS, \"rect\");\r\n    rect.setAttributeNS(null, \"width\", this.width);\r\n    rect.setAttributeNS(null, \"height\", this.height);\r\n    rect.setAttributeNS(null, \"fill\", \"#353535\");\r\n    rect.setAttributeNS(null, \"x\", 0);\r\n    rect.setAttributeNS(null, \"y\", 0);\r\n    svg.appendChild(rect);\r\n    let line = document.createElementNS(SVG_NS, \"line\");\r\n    line.setAttributeNS(null, \"x1\", this.width/2);\r\n    line.setAttributeNS(null, \"y1\", 0);\r\n    line.setAttributeNS(null, \"x2\", this.width/2);\r\n    line.setAttributeNS(null, \"y2\", this.height);\r\n    line.setAttributeNS(null, \"stroke\", \"white\");\r\n    line.setAttributeNS(null, \"stroke-dasharray\", \"20 15\");\r\n    line.setAttributeNS(null, \"stroke-width\", 3);\r\n    svg.appendChild(line);\r\n  }\r\n}","import { SVG_NS, SPEED } from '../settings';\r\n\r\nexport default class Paddle {\r\n  constructor(boardHeight, paddleWidth, paddleHeight, initialX, initialY, keyUp, keyDown) {\r\n      this.boardHeight = boardHeight;\r\n      this.paddleWidth = paddleWidth;\r\n      this.paddleHeight = paddleHeight;\r\n      this.x = initialX;\r\n      this.y = initialY;\r\n      this.score = 0;\r\n      this.speed = SPEED;\r\n      document.addEventListener(\"keydown\", event => {\r\n        switch(event.key) {\r\n            case keyUp:\r\n                this.moveUp();\r\n                break;\r\n            case keyDown:\r\n                this.moveDown();\r\n                break;\r\n        }\r\n      });\r\n  }\r\n\r\n  increaseScore() {\r\n    this.score ++;\r\n  }\r\n\r\n  getScore() {\r\n    return this.score;\r\n  }\r\n\r\n  resetScore() {\r\n    this.score = 0;\r\n    this.y = this.boardHeight / 2 ;\r\n  }\r\n\r\n  moveUp() {\r\n      this.y = Math.max(0, this.y - this.speed);\r\n  }\r\n\r\n  moveDown() {\r\n      this.y = Math.min(this.boardHeight - this.paddleHeight, this.y + this.speed);\r\n  }\r\n\r\n  getCoordinates() {\r\n    const walls = {\r\n      left: this.x,\r\n      top: this.y,\r\n      right: this.x + this.paddleWidth,\r\n      bottom: this.y + this.paddleHeight,\r\n    }\r\n    return walls;\r\n  }\r\n\r\n  render(svg) {\r\n    let rect = document.createElementNS(SVG_NS, \"rect\");\r\n    rect.setAttributeNS(null, \"width\", this.paddleWidth);\r\n    rect.setAttributeNS(null, \"height\", this.paddleHeight);\r\n    rect.setAttributeNS(null, \"fill\", \"white\");\r\n    rect.setAttributeNS(null, \"x\", this.x);\r\n    rect.setAttributeNS(null, \"y\", this.y);    \r\n    svg.appendChild(rect);\r\n\r\n  }\r\n}","import { SVG_NS } from '../settings';\r\nimport audioFile from \"../../public/sounds/pong-03.wav\";\r\n\r\nexport default class Ball {\r\n    constructor(boardWidth, boardHeight, radius) {\r\n        this.boardWidth = boardWidth;\r\n        this.boardHeight = boardHeight;\r\n        this.radius = radius;\r\n        this.direction = 1;\r\n        this.ping = new Audio(audioFile);\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.x = this.boardWidth/2;\r\n        this.y = this.boardHeight/2;\r\n        this.vy = 0;\r\n        this.vx = 0;\r\n        while (this.vy === 0) {\r\n            this.vy = Math.floor(Math.random() * 10 - 5);\r\n        }\r\n        this.vx = this.direction * (6 - Math.abs(this.vy))/2.2;\r\n        this.vy = this.vy/2.2;\r\n    }\r\n\r\n    wallCollision() {\r\n        const hitsTop = this.y - this.radius <= 0;\r\n        const hitsBottom  = this.y + this.radius >= this.boardHeight;\r\n        if (hitsTop || hitsBottom) {\r\n            this.vy = this.vy * -1;\r\n        }\r\n    }\r\n    goalCollision(player1, player2) {\r\n        if (this.x <= 0) {\r\n            player2.increaseScore();\r\n            this.direction = this.direction * -1;\r\n            this.reset();\r\n        } else if (this.x >= this.boardWidth) {\r\n            player1.increaseScore();\r\n            this.direction = this.direction * -1;\r\n            this.reset();\r\n        }\r\n    }\r\n    paddleCollision(player1, player2) {\r\n        if (this.vx > 0) {\r\n            const p2 = player2.getCoordinates();\r\n            // check for hit with player2\r\n            if (this.x + this.radius >= p2.left &&\r\n                this.y + this.radius <= p2.right &&\r\n                this.y >= p2.top &&\r\n                this.y <= p2.bottom) {\r\n                    this.vx = this.vx * -1;\r\n                    this.ping.play().catch(e => null);\r\n                }\r\n        } else {\r\n            const p1 = player1.getCoordinates();\r\n            if (this.x - this.radius <= p1.right &&\r\n                this.x - this.radius >= p1.left &&\r\n                this.y >= p1.top &&\r\n                this.y <= p1.bottom) {\r\n                    this.vx = this.vx * -1;\r\n                    this.ping.play().catch(e => null);\r\n                }\r\n        }\r\n    }\r\n    render(svg, player1, player2) {\r\n        let circle = document.createElementNS(SVG_NS, \"circle\");\r\n        circle.setAttributeNS(null, \"fill\", \"white\");\r\n        circle.setAttributeNS(null, \"cx\", this.x);\r\n        circle.setAttributeNS(null, \"cy\", this.y)\r\n        circle.setAttributeNS(null, \"r\", this.radius);\r\n        this.x = this.x + this.vx;\r\n        this.y = this.y + this.vy;\r\n        this.wallCollision();\r\n        this.goalCollision(player1,player2);\r\n        this.paddleCollision(player1, player2);\r\n        svg.appendChild(circle);\r\n    }\r\n}","import { SVG_NS, TEXT_SIZE } from '../settings';\r\n\r\nexport default class Score {\r\n  constructor(xPosition, yPosition) {\r\n      this.x = xPosition;\r\n      this.y = yPosition;\r\n  }\r\n  render(svg, score) {\r\n    let text = document.createElementNS(SVG_NS, \"text\");\r\n    text.setAttributeNS(null, \"fill\", \"white\");\r\n    text.setAttributeNS(null, \"font-size\", TEXT_SIZE);\r\n    text.setAttributeNS(null, \"font-family\", \"'Silkscreen Web', monotype\");\r\n    text.setAttributeNS(null, \"x\", this.x);\r\n    text.setAttributeNS(null, \"y\", this.y);\r\n    text.textContent = score;\r\n    svg.appendChild(text);\r\n  }\r\n}","import { SVG_NS, WINNER_TEXT } from '../settings';\r\n\r\nexport default class Winner {\r\n    constructor(xPosition, yPosition) {\r\n        this.x = xPosition;\r\n        this.y = yPosition;\r\n        this.message = \"\";\r\n    }\r\n\r\n    setMessage(message) {\r\n        this.message = message;\r\n    }\r\n\r\n    render(svg, winner1, winner2) {\r\n        let box = document.createElementNS(SVG_NS, \"text\");\r\n        box.setAttributeNS(null, \"fill\", \"white\");\r\n        box.setAttributeNS(null, \"font-size\", WINNER_TEXT);\r\n        box.setAttributeNS(null, \"font-family\", \"'Silkscreen Web', monotype\");\r\n        box.setAttributeNS(null, \"x\", this.x);\r\n        box.setAttributeNS(null, \"y\", this.y);\r\n        box.textContent = this.message;\r\n        svg.appendChild(box);\r\n    }\r\n}","import { SVG_NS } from '../settings';\r\nimport audioFile from \"../../public/sounds/pong-03.wav\";\r\n\r\nexport default class Balls {\r\n    constructor(boardWidth, boardHeight, radius) {\r\n        this.boardWidth = boardWidth;\r\n        this.boardHeight = boardHeight;\r\n        this.radius = radius;\r\n        this.direction = 1;\r\n        this.ping = new Audio(audioFile);\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.x = this.boardWidth/2;\r\n        this.y = this.boardHeight/2;\r\n        this.vy = 0;\r\n        this.vx = 0;\r\n        while (this.vy === 0) {\r\n            this.vy = Math.floor(Math.random() * 10 - 5);\r\n        }\r\n        this.vx = this.direction * (6 - Math.abs(this.vy))/2.5;\r\n        this.vy = this.vy/2.5;\r\n    }\r\n    wallCollision() {\r\n        const hitsTop = this.y - this.radius <= 0;\r\n        const hitsBottom  = this.y + this.radius >= this.boardHeight;\r\n        if (hitsTop || hitsBottom) {\r\n            this.vy = this.vy * -1;\r\n        }\r\n    }\r\n    goalCollision(player1, player2) {\r\n        if (this.x <= 0) {\r\n            player2.increaseScore();\r\n            this.direction = this.direction * -1;\r\n            this.reset();\r\n        } else if (this.x >= this.boardWidth) {\r\n            player1.increaseScore();\r\n            this.direction = this.direction * -1;\r\n            this.reset();\r\n        }\r\n    }\r\n    paddleCollision(player1, player2) {\r\n        if (this.vx > 0) {\r\n            const p2 = player2.getCoordinates();\r\n            // check for hit with player2\r\n            if (this.x + this.radius >= p2.left &&\r\n                this.y + this.radius <= p2.right &&\r\n                this.y >= p2.top &&\r\n                this.y <= p2.bottom) {\r\n                    this.vx = this.vx * -1;\r\n                    this.ping.play().catch(e => null);\r\n                }\r\n        } else {\r\n            const p1 = player1.getCoordinates();\r\n            if (this.x - this.radius <= p1.right &&\r\n                this.x - this.radius >= p1.left &&\r\n                this.y >= p1.top &&\r\n                this.y <= p1.bottom) {\r\n                    this.vx = this.vx * -1;\r\n                    this.ping.play().catch(e => null);\r\n                }\r\n        }\r\n    }\r\n    render(svg, player1, player2) {\r\n        let balls = document.createElementNS(SVG_NS, \"circle\");\r\n        balls.setAttributeNS(null, \"fill\", \"yellow\");\r\n        balls.setAttributeNS(null, \"cx\", this.x);\r\n        balls.setAttributeNS(null, \"cy\", this.y)\r\n        balls.setAttributeNS(null, \"r\", this.radius);\r\n        this.x = this.x + this.vx;\r\n        this.y = this.y + this.vy;\r\n        this.wallCollision();\r\n        this.goalCollision(player1,player2);\r\n        this.paddleCollision(player1, player2);\r\n        svg.appendChild(balls);\r\n    }\r\n}","import { SVG_NS } from '../settings';\r\nimport audioFile from \"../../public/sounds/pong-03.wav\";\r\n\r\nexport default class BallsTwo {\r\n    constructor(boardWidth, boardHeight, radius) {\r\n        this.boardWidth = boardWidth;\r\n        this.boardHeight = boardHeight;\r\n        this.radius = radius;\r\n        this.direction = 1;\r\n        this.ping = new Audio(audioFile);\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.x = this.boardWidth/2;\r\n        this.y = this.boardHeight/2;\r\n        this.vy = 0;\r\n        this.vx = 0;\r\n        while (this.vy === 0) {\r\n            this.vy = Math.floor(Math.random() * 10 - 5);\r\n        }\r\n        this.vx = this.direction * (6 - Math.abs(this.vy))/2;\r\n        this.vy = this.vy/2;\r\n    }\r\n    wallCollision() {\r\n        const hitsTop = this.y - this.radius <= 0;\r\n        const hitsBottom  = this.y + this.radius >= this.boardHeight;\r\n        if (hitsTop || hitsBottom) {\r\n            this.vy = this.vy * -1;\r\n        }\r\n    }\r\n    goalCollision(player1, player2) {\r\n        if (this.x <= 0) {\r\n            player2.increaseScore();\r\n            this.direction = this.direction * -1;\r\n            this.reset();\r\n        } else if (this.x >= this.boardWidth) {\r\n            player1.increaseScore();\r\n            this.direction = this.direction * -1;\r\n            this.reset();\r\n        }\r\n    }\r\n    paddleCollision(player1, player2) {\r\n        if (this.vx > 0) {\r\n            const p2 = player2.getCoordinates();\r\n            // check for hit with player2\r\n            if (this.x + this.radius >= p2.left &&\r\n                this.y + this.radius <= p2.right &&\r\n                this.y >= p2.top &&\r\n                this.y <= p2.bottom) {\r\n                    this.vx = this.vx * -1;\r\n                    this.ping.play().catch(e => null);\r\n                }\r\n        } else {\r\n            const p1 = player1.getCoordinates();\r\n            if (this.x - this.radius <= p1.right &&\r\n                this.x - this.radius >= p1.left &&\r\n                this.y >= p1.top &&\r\n                this.y <= p1.bottom) {\r\n                    this.vx = this.vx * -1;\r\n                    this.ping.play().catch(e => null);\r\n                }\r\n        }\r\n    }\r\n    render(svg, player1, player2) {\r\n        let newBalls2 = document.createElementNS(SVG_NS, \"circle\");\r\n        newBalls2.setAttributeNS(null, \"fill\", \"red\");\r\n        newBalls2.setAttributeNS(null, \"cx\", this.x);\r\n        newBalls2.setAttributeNS(null, \"cy\", this.y)\r\n        newBalls2.setAttributeNS(null, \"r\", this.radius);\r\n        this.x = this.x + this.vx;\r\n        this.y = this.y + this.vy;\r\n        this.wallCollision();\r\n        this.goalCollision(player1,player2);\r\n        this.paddleCollision(player1, player2);\r\n        svg.appendChild(newBalls2);\r\n    }\r\n}","import { SVG_NS, PADDLE_WIDTH, PADDLE_HEIGHT, BOARD_GAP, KEYS, RADIUS, NEW_RADIUS, MORE_RADIUS } from '../settings';\nimport Board from './Board';\nimport Paddle from './Paddle';\nimport Ball from './Ball';\nimport Score from './Score';\nimport Winner from './Winner';\nimport Balls from './newBalls';\nimport BallsTwo from './newBalls2';\n\nexport default class Game {\n  constructor(element, width, height, paused) {\n    this.element = element;\n    this.width = width;\n    this.height = height;\n    this.paused = false;\n    this.gameElement = document.getElementById(this.element);\n    this.board = new Board(this.width, this.height);\n    const boardMid = (this.height - PADDLE_HEIGHT)/2;\n    this.paddle1 = new Paddle(this.height, PADDLE_WIDTH, PADDLE_HEIGHT, BOARD_GAP, boardMid, KEYS.p1up, KEYS.p1down);\n    const paddle2Gap = this.width - BOARD_GAP - PADDLE_WIDTH;\n    this.paddle2 = new Paddle(this.height, PADDLE_WIDTH, PADDLE_HEIGHT, paddle2Gap, boardMid, KEYS.p2up, KEYS.p2down);\n    this.circle = new Ball(this.width, this.height, RADIUS);\n    this.score1 = new Score(this.width/2 - 50, 30);\n    this.score2 = new Score(this.width/2 + 25, 30);\n    this.winner1 = new Winner(this.width/2 + 25, 80);\n    this.winner2 = new Winner(this.width/2 - 225, 80);\n    document.addEventListener(\"keydown\", (event) => {\n        if (event.key === KEYS.pauseKey) {\n          this.paused = !this.paused;\n        }\n    });\n    this.balls = new Balls(this.width, this.height, NEW_RADIUS);\n    this.newBalls2 = new BallsTwo(this.width, this.height, MORE_RADIUS);\n  }\n\n  render() {\n    if (this.paused) {\n      return;\n    }\n    this.gameElement.innerHTML = \"\";\n    let svg = document.createElementNS(SVG_NS, \"svg\");\n    svg.setAttributeNS(null, \"width\", this.width);\n    svg.setAttributeNS(null, \"height\", this.height);\n    svg.setAttributeNS(null, \"viewBox\", `0 0 ${this.width} ${this.height}`);\n    this.gameElement.appendChild(svg)\n    this.board.render(svg);\n    this.paddle1.render(svg);\n    this.paddle2.render(svg);\n    this.circle.render(svg, this.paddle1, this.paddle2);\n    this.score1.render(svg, this.paddle1.getScore());\n    this.score2.render(svg, this.paddle2.getScore());\n\n    if (this.paddle1.getScore() >= 15) {\n      this.winner1.setMessage('Player 1 WINS!');\n      this.winner1.render(svg, this.paddle1.getScore(), this.paddle2.getScore());\n      this.paddle1.resetScore();\n      this.paused = true;\n    } else if (this.paddle2.getScore() >= 15) {\n      this.winner2.setMessage('Player 2 WINS!');\n      this.winner2.render(svg, this.paddle1.getScore(), this.paddle2.getScore());\n      this.paddle2.resetScore();\n      this.paused = true;\n  }\n\n    if (this.paddle1.getScore() >= 3) {\n      this.balls.render(svg, this.paddle1, this.paddle2);\n      } else if (this.paddle2.getScore() >= 3) {\n        this.balls.render(svg, this.paddle1, this.paddle2);\n      }\n      \n    if (this.paddle1.getScore() >= 6) {\n      this.newBalls2.render(svg, this.paddle1, this.paddle2);\n      } else if (this.paddle2.getScore() >= 6) {\n      this.newBalls2.render(svg, this.paddle1, this.paddle2);\n      }\n\n  }\n}","import './styles/game.css';\nimport Game from './partials/Game';\n\n// create a game instance\nconst game = new Game('game', 512, 256);\n\n(function gameLoop() {\n  game.render();\n  requestAnimationFrame(gameLoop);\n})();\n"]}